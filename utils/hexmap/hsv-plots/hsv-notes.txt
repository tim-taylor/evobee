
gen-data-for-patch-visualisation-hsv.awk  /  patch-visualisation-hsv.gnuplot 
============================================================================

Plots flower positions (as recorded in log file by F flag) in HSV.

The following procedure will generate the expected input files, which have lines in the format:

  1      2      3       4       5      6      7      8           9
  ENV_X, ENV_Y, RUN_ID, AUX_ID, HEX_X, HEX_Y, THETA, DOM_LAMBDA, DIST_FROM_ORIGIN

Note that this procedure requires the log file to contain data from both flags "F" and "n".

---

LOGFILE="aus-dataset-1-only-20210223-sample-1-2021-03-08-16-23-14-496119-log.txt"
MFILE="/home/tim/evobee-hexmap/aus-data-20210111/aus-hex-space-info.csv"
SCRIPTDIR="/home/tim/evobee/code/evobee/utils/hexmap/hsv-plots"
R2AFILE="runid-to-auxid-map.csv"
DFILEBASE="flower-positions-hsv"
GENFIRST=0
GENLAST=99
GENSTEP=1

GENS=`seq $GENFIRST $GENSTEP $GENLAST`
# or
GENS=`seq $GENFIRST $GENSTEP $GENLAST`" 5999"
#
GENS=`seq 0 50 5960`" 5999"

gawk -F, '$1=="n" && $2==0 {print $4","$9}' $LOGFILE > $R2AFILE

for G in $GENS; do gawk -vMFILE=$MFILE -vR2AFILE=$R2AFILE -vG=$G -f $SCRIPTDIR/gen-data-for-patch-visualisation-hsv.awk $LOGFILE > $DFILEBASE-gen-$G.csv; done

for G in $GENS; do gnuplot -c $SCRIPTDIR/patch-visualisation-hsv.gnuplot $DFILEBASE $G; done

---

To create an mp4 movie from a bunch of these png files, use:

ffmpeg -f image2 -pattern_type glob -framerate 12 -i 'flower-positions-hsv-gen-*.png' -s 900x800 -quality 100 out.mp4

-- OTHER OPTIONS --
ffmpeg -framerate 30 -i flower-positions-hsv-gen-%04d.png -c:v libx264 -r 30 -pix_fmt yuv420p out.mp4
~~ or ~~
convert *png out.mp4
~~ or ~~
https://clideo.com/editor/video-maker

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

runid-to-auxid-map.csv (aka R2AFILE)
======================

This can be generated from the vis-data array in the run's JSON config file, by extracting the 1st and 10th field of each line

grep "\[" $JSONFILE | gawk -F, '{gsub(/\[/,"",$1); gsub(/ /,"",$1); gsub(/\]/,"",$10); gsub(/ /,"",$10); print $1","$10}' > runid-to-auxid-map.csv


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

aus-hex-space-info.csv (aka MFILE)
======================
(in evobee/utils/hexmap/aus-data-20210111)

## Generation of hex space info file

# produce file aus-hex-space-info.csv with format AUSID, HEXX, HEXY, THETA, DOM_LAMBDA, DIST_FROM_ORIGIN

# Run on a file hex-plot-data-gen-0.csv generated by the script gen-hex-plot-data-across-runs.ausid

gawk -F, '{D=sqrt($2^2 + $3^2); printf("%d, %.5f, %.5f, %.5f, %d, %.5f\n", $1,$2,$3,$4,$8,D);}' hex-plot-data-gen-0.csv > aus-hex-space-info.csv


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




OBSOLETE STUFF BELOW THIS LINE
==============================

---
LOGFILE=aus-dataset-1-only-20210223-sample-1-2021-03-08-16-23-14-496119-log.txt
MFILE=/home/tim/evobee-hexmap/aus-data-20210111/aus-hex-space-info.csv
R2AFILE=runid-to-auxid-map.csv
GENFIRST=0
GENLAST=99
GENSTEP=1

gawk -F, '$1=="n" && $2==0 {print $4","$9}' $LOGFILE > $R2AFILE

for G in `seq $GENFIRST $GENSTEP $GENLAST`; do gawk -F, -vMFILE=$MFILE -vR2AFILE=$R2AFILE -vG=$G '$1=="F" && $2==G {RID=$4; ENVX=$5; ENVY=$6; cmd1="grep \"^"RID",\" "R2AFILE; cmd1 | getline line; close(cmd1); comidx=index(line, ","); AID=substr(line, comidx+1); cmd2="grep \"^"AID",\" "MFILE; cmd2 | getline info; close(cmd2); printf("%.5f, %.5f, %d, %s\n", ENVX, ENVY, RID, info);}' $LOGFILE > flower-positions-g$G-extra.csv; done
---

~~~~

# call this with, e.g.
# > gnuplot -e "gen=0;filebase='flower-positions';envsize=240" patch-visualisation-hsv.gnuplot
# or
# > for G in `seq 0 10 90`; do gnuplot -e "gen=$G;filebase='flower-positions'" patch-visualisation-hsv.gnuplot; done
#
# with a specified filename base "filebase" and a generation number "gen", the script expects to find
# an input file called "filebase"-g"gen".csv
#
# The output is saved to a file called "filebase"-g"gen".png
#
# The input files should have lines of the following format:
#    x pos, y pos, speciesID (id as used in JSON file)
#
# These can be generated from the raw log files as follows:
# > for G in `seq 0 10 99`; do gawk -F',' -vG=$G '$1=="F" {if ($2==G) {print $5 "," $6 "," $4}}' run-log.txt > flower-positions-g$G.csv; done

~~~~
